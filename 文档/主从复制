MySQL数据库自身提供的主从复制功能可以方便的实现数据的多处自动备份，实现数据库的拓展。多个数据备份不仅可以加强数据的安全性，通过实现读写分离还能进一步提升数据库的负载性能。

看一个主从复制和读写分离的架构图：


在一主多从的数据库体系中，多个从服务器采用异步的方式更新主数据库的变化，业务服务器在执行写或者相关修改数据库的操作是在主服务器上进行的，读操作则是在各从服务器上进行。如果配置了多个从服务器或者多个主服务器又涉及到相应的负载均衡问题，关于负载均衡具体的技术细节还没有研究过，今天就先简单的实现一主一从的主从复制功能。

Mysql主从复制的实现原理图大致如下


主服务器：
1：开启二进制日志
2：配置唯一的server-id
3：获得master二进制文件的文件名以及复制起始位置
4：创建一个用于slave和master通信的账号
从服务器：
1：配置唯一的server-id
2：使用master分配的账号读取二进制日志
3：启动slave服务
4：查看slave状态

话不多少，我们看操作：
主：192.168.75.68
从：192.168.75.118

主：
在/etc/my.cnf里修改：
[mysqld]
log-bin=mysql-bin                    #开启二进制日志
server-id=1                          #配置server-id
重启mysql进程

创建账号：这里我们就用root的好了

查看master状态：
mysql> show master status；
+------------------+----------+--------------+------------------+-------------------+
| File             | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set |
+------------------+----------+--------------+------------------+-------------------+
| mysql-bin.000001 |      120 |              |                  |                   |
+------------------+----------+--------------+------------------+-------------------+
1 row in set (0.00 sec)

好，这里主服务器基本搞定了！

从：
修改/etc/my.cnf文件：
[mysqld]
server-id=2                            #配置server-id
重启mysql进程

登录mysql，执行指令：
mysql> CHANGE MASTER TO
    ->   MASTER_HOST='192.168.75.68',                    #master的HOST
    ->   MASTER_USER='root',                             #master配置的用户名
    ->   MASTER_PASSWORD='51..dmz',                      #master用户的密码
    ->   MASTER_LOG_FILE='mysql-bin.000001',             #二进制日志的名称
    ->   MASTER_LOG_POS=120;                             #开始跟踪的位置
Query OK, 0 rows affected, 2 warnings (0.01 sec)
mysql> start slave;                                       #开始复制
mysql> show slave status\G;
*************************** 1. row ***************************
               Slave_IO_State: Waiting for master to send event
                  Master_Host: 192.168.75.68
                  Master_User: root
                  Master_Port: 3306
                Connect_Retry: 60
              Master_Log_File: mysql-bin.000001
          Read_Master_Log_Pos: 120
               Relay_Log_File: localhost-relay-bin.000002
                Relay_Log_Pos: 283
        Relay_Master_Log_File: mysql-bin.000001
             Slave_IO_Running: Yes                        ##########
            Slave_SQL_Running: Yes                        ########## 这里两段都为Yes，才说明已经成功开启复制功能了
              Replicate_Do_DB:
          Replicate_Ignore_DB:
 


好，此时我们在主库执行新建操作：
mysql> CREATE TABLE `account00` (
    ->   `AccountHash` int(11) NOT NULL,
    ->   `AccountID` varchar(128) NOT NULL,
    ->   `ZoneID` int(11) NOT NULL,
    ->   `RoleID` bigint(20) NOT NULL,
    ->   PRIMARY KEY (`AccountHash`,`AccountID`,`ZoneID`,`RoleID`)
    -> ) ENGINE=InnoDB DEFAULT CHARSET=utf8;
Query OK, 0 rows affected (0.06 sec)
mysql> insert into account00 values (21323213, 787492757375, 314342425, 989997979797);  
mysql> insert into account00 values (21323221, 787442757371, 312342421, 986587979717);
mysql> select * from account00;
+-------------+--------------+-----------+--------------+
| AccountHash | AccountID    | ZoneID    | RoleID       |
+-------------+--------------+-----------+--------------+
|    21323213 | 787492757375 | 314342425 | 989997979797 |
|    21323222 | 787442757375 | 312342425 | 986587979797 |
+-------------+--------------+-----------+--------------+
2 rows in set (0.00 sec)

我们去看下从库：
首先：
show databases;
我们看到新建的test_relay已经存在了！
mysql> use test_relay;
Reading table information for completion of table and column names
You can turn off this feature to get a quicker startup with -A

Database changed
mysql> show tables;
+----------------------+
| Tables_in_test_relay |
+----------------------+
| account00            |
+----------------------+
1 row in set (0.00 sec)

mysql> select * from account00;
+-------------+--------------+-----------+--------------+
| AccountHash | AccountID    | ZoneID    | RoleID       |
+-------------+--------------+-----------+--------------+
|    21323213 | 787492757375 | 314342425 | 989997979797 |
|    21323221 | 787442757371 | 312342421 | 986587979717 |
+-------------+--------------+-----------+--------------+
2 rows in set (0.00 sec)

你看，主库的操作，也复制到从库里来了！这就说明咱们的主从复制功能是顺利的实现了！


！！！这里要注意一个点！！！！
我们在部署主从复制的时候，一把两个库都是初始库，没有业务库的，那么在我们的实验环境中，其实主库和从库在部署之前都已经拥有了各自的业务库，那么这里在部署完成之后，之前老的业务库的复制情况是怎样的呢？？

为了试验，我们在主库的老的业务库路执行了新建操作，但是在从库中，发现并没有任何变化！
更重要的是！！！
我们部署好后新建的测试库下的新建数据似乎也不能完成复制了！！！
哇~好心疼~
我们看下从库的slave status
mysql> show slave status\G;
*************************** 1. row ***************************
               Slave_IO_State: Waiting for master to send event
                  Master_Host: 192.168.75.68
                  Master_User: root
                  Master_Port: 3306
                Connect_Retry: 60
              Master_Log_File: mysql-bin.000001
          Read_Master_Log_Pos: 1851
               Relay_Log_File: localhost-relay-bin.000002
                Relay_Log_Pos: 1073
        Relay_Master_Log_File: mysql-bin.000001
             Slave_IO_Running: Yes
            Slave_SQL_Running: No                        ##这里我们看到这里的Yes变成No了！！！！
              Replicate_Do_DB:
          Replicate_Ignore_DB:
       

是不是很可惜~
那么这种情况要怎么修复呢？

一般是从新不是change master就好了
主：
mysql> show master status;
+------------------+----------+--------------+------------------+-------------------+
| File             | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set |
+------------------+----------+--------------+------------------+-------------------+
| mysql-bin.000001 |     1851 |              |                  |                   |
+------------------+----------+--------------+------------------+-------------------+
此时我们看主库的master status是有变化的，文件没变，但是POS的位置变大了，因为刚刚我们已经执行了一些新建操作了！
就像人在走路一样很好理解~

从： 重新change master
mysql> stop slave;
Query OK, 0 rows affected (0.00 sec)
mysql> CHANGE MASTER TO
    ->   MASTER_HOST='192.168.75.68',
    ->   MASTER_USER='root',
    ->   MASTER_PASSWORD='51..dmz',  
    ->   MASTER_LOG_FILE='mysql-bin.000001',
    ->   MASTER_LOG_POS=1851;                            注意这里是从新的位置开始跟踪了！
Query OK, 0 rows affected, 2 warnings (0.01 sec)
mysql> start slave;
Query OK, 0 rows affected (0.00 sec)
mysql> show slave status\G;
*************************** 1. row ***************************
               Slave_IO_State: Waiting for master to send event
                  Master_Host: 192.168.75.68
                  Master_User: root
                  Master_Port: 3306
                Connect_Retry: 60
              Master_Log_File: mysql-bin.000001
          Read_Master_Log_Pos: 1851
               Relay_Log_File: localhost-relay-bin.000002
                Relay_Log_Pos: 283
        Relay_Master_Log_File: mysql-bin.000001
             Slave_IO_Running: Yes
            Slave_SQL_Running: Yes
              Replicate_Do_DB:
          Replicate_Ignore_DB:
       
    

此时看到两个Slave又是Running的状态了！！！
但是，这里要注意的是，如果你还不知道这里出现了问题的话，且主库又一直在往测试库里写数据，这里中间的数据就丢掉了！！！所以，这里还是很危险的！

牢记：
我们部署好主从复制，往后所有的新建操作都是要在原先没有的库或者表中去操作，如果依旧是操作原本的老库的话，就会出现复制IO断掉的情况！！！


为了更好的规避这个问题，一般我们初始化之后，就会为两个或者多个空库部署主从复制，不存在有老的业务库的情况~
如果真的是后面才发现需要部署主从复制的时候，那么我们也能手动操作忽略某些库的新建操作，防止IO中断！

在主库上修改配置文件：
[mysqld]
log-bin=mysql-bin
server-id=1
binlog-ignore-db = mysql                            ##这里往下四个库，就是被手动忽略掉的
binlog-ignore-db = test
binlog-ignore-db = information_schema
binlog-ignore-db = sdo_statistic

其中，还有一些经典的指令需要掌握一下：

stop slave 可以停止 从服务器
reset slave 清空从服务器的规则                #这条是上面没有涉及到的，注意下！
start slave 启动从服务器
show slave status 查看从服务器状态
show master status 查看主服务器状态


那么在我的亲自实验下，对已经忽略掉的库进行的操作，是不会被重演到从库里的，且slave status不会出现 No 的情况，因此，这种方法一定要记住！
安全，好用！



坚持不懈！
2019/5/20 20:33
